  <div class="row justify-content-center" >

  
      <input type="text" name="file_name" placeholder="Le nom du fichier..." id="myInput" 
      style="width: 35%; 
      height: 40px;
      border-radius: 8px;
      padding: 12px 10px;
      " 
      >

  </div>


  <div class="row justify-content-center" style="margin-bottom: 15px;">  
      <p class="font-italic" id="error1" style="font-size: 11px; color: red; visibility: hidden;"> 
        fichier non trouv√© . 
      </p>
  </div>


  git add -f db.sqlite3


  <script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" 
    integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>

        <script type="text/javascript" src="https://cdn.datatables.net/1.10.2/js/jquery.dataTables.min.js"></script>

  <link rel="stylesheet" href="https://cdn.datatables.net/1.10.2/css/jquery.dataTables.min.css">




  # comments_user = request.user.commentaires.all().values_list('id', flat=True)
    # comments_id = request.user.commentaires.all().values_list('id', flat=True)


    # comments_user = request.user.commentaires.all()




        # comment = []
# .find({"id" : { '$nin':comment_user }})

    # for i in range(9):

    #     record = comments_list.next()

    #     if record:

    #         comment.append(record)



    # for i in range(9):

 
    # comments = [x for x in comments_list if x not in comments_user]


    # for el in comments_list:
    #     print(el)



     
    # comments_list = Comment.objects.filter(~Q( id__in = comments_user ) ) 
    # comments_list = list(Comment.objects.exclude(id__in = comments_user))

     
     
    # comments_list = list(comments_list)

     
    

    # comments_list = []



   


    # random.shuffle(comments_list)
    # try:
    #     paginator = Paginator(comments_list, 9)    
    # except Exception as e:
    #     pass
     

  

    # page = request.GET.get('page', 1)

    # try:
    #     comments = paginator.page(page)
    #     nbr_page =  comments.paginator.num_pages - 1
    # except PageNotAnInteger:
    #     comments = paginator.page(page)
    # except EmptyPage:
    #     comments = paginator.page(paginator.num_pages)
 
     

    # comments_list = Comment.objects.filter(totaux_votes__lt=40) 



db.AppComments_comment.count_documents({})